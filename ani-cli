#!/bin/sh

version_number="4.10.8"

# UI

external_menu() {
    rofi "$1" -sort -dmenu -i -width 1500 -p "$2" "$3"
}

launcher() {
    [ "$use_external_menu" = "0" ] && [ -z "$1" ] && set -- "+m" "$2"
    [ "$use_external_menu" = "0" ] && fzf "$1" --reverse --cycle --prompt "$2"
    [ "$use_external_menu" = "1" ] && external_menu "$1" "$2" "$external_menu_args"
}

nth() {
    stdin=$(cat -)
    [ -z "$stdin" ] && return 1
    line_count="$(printf "%s\n" "$stdin" | wc -l | tr -d "[:space:]")"
    [ "$line_count" -eq 1 ] && printf "%s" "$stdin" | cut -f2,3 && return 0
    prompt="$1"
    multi_flag=""
    [ $# -ne 1 ] && shift && multi_flag="$1"
    line=$(printf "%s" "$stdin" | cut -f1,3 | tr '\t' ' ' | launcher "$multi_flag" "$prompt" | cut -d " " -f 1)
    line_start=$(printf "%s" "$line" | head -n1)
    line_end=$(printf "%s" "$line" | tail -n1)
    [ -n "$line" ] || exit 1
    if [ "$line_start" = "$line_end" ]; then
        printf "%s" "$stdin" | grep -E '^'"${line}"'($|[[:space:]])' | cut -f2,3 || exit 1
    else
        printf "%s" "$stdin" | sed -n '/^'"${line_start}"'$/,/^'"${line_end}$"'/p' || exit 1
    fi
}

die() {
    printf "\33[2K\r\033[1;31m%s\033[0m\n" "$*" >&2
    exit 1
}

help_info() {
    printf "
    Usage:
    %s [options] [query]
    %s [query] [options]
    %s [options] [query] [options]

    Options:
      -c, --continue
        Continue watching from history
      -d, --download
        Download the video instead of playing it
      -D, --delete
        Delete history
      -l, --logview
        Show logs
      -s, --syncplay
        Use Syncplay to watch with friends
      -S, --select-nth
        Select nth entry
      -q, --quality
        Specify the video quality
      -v, --vlc
        Use VLC to play the video
      -V, --version
        Show the version of the script
      -h, --help
        Show this help message and exit
      -e, --episode, -r, --range
        Specify the number of episodes to watch
      --dub
        Play dubbed version
      --rofi
        Use rofi instead of fzf for the interactive menu
      --skip
        Use ani-skip to skip the intro of the episode (mpv only)
      --no-detach
        Don't detach the player (useful for in-terminal playback, mpv only)
      --exit-after-play
        Exit the player, and return the player exit code (useful for non interactive scenarios, mpv only)
      --skip-title <title>
        Use given title as ani-skip query
      -N, --nextep-countdown
        Display a countdown to the next episode
      -U, --update
        Update the script
      --mal-id <id>
        Search for anime by MyAnimeList ID (requires MAL API client ID)
      --mal-season
        Browse current season anime from MyAnimeList
      --mal-top
        Browse top anime from MyAnimeList
      --clear-cache
        Clear the cache directory
      --favorites
        Browse your favorite anime
      --add-favorite <name>
        Add anime to favorites by name
    Some example usages:
      %s -q 720p banana fish
      %s --skip --skip-title \"one piece\" -S 2 one piece
      %s -d -e 2 cyberpunk edgerunners
      %s --vlc cyberpunk edgerunners -q 1080p -e 4
      %s blue lock -e 5-6
      %s -e \"5 6\" blue lock
      %s --mal-id 21 one piece
      %s --add-favorite "one piece"
    \n" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}"
    exit 0
}

version_info() {
    printf "%s\n" "$version_number"
    exit 0
}

update_script() {
    update="$(curl -s -A "$agent" "https://raw.githubusercontent.com/pystardust/ani-cli/master/ani-cli")" || die "Connection error"
    update="$(printf '%s\n' "$update" | diff -u "$0" -)"
    if [ -z "$update" ]; then
        printf "Script is up to date :)\n"
    else
        if printf '%s\n' "$update" | patch "$0" -; then
            printf "Script has been updated\n"
        else
            die "Can't update for some reason!"
        fi
    fi
    exit 0
}

# checks if dependencies are present
dep_ch() {
    for dep; do
        command -v "${dep%% *}" >/dev/null || die "Program \"${dep%% *}\" not found. Please install it."
    done
}

where_iina() {
    [ -e "/Applications/IINA.app/Contents/MacOS/iina-cli" ] && echo "/Applications/IINA.app/Contents/MacOS/iina-cli" && return 0
    printf "%s" "iina" && return 0
}

where_mpv() {
    command -v "flatpak" >/dev/null && flatpak info io.mpv.Mpv >/dev/null 2>&1 && printf "%s" "flatpak_mpv" && return 0
    printf "%s" "mpv" && return 0
}

# MAL API

# search anime by MAL ID using the official MAL API
search_anime_by_mal_id() {
    mal_id="$1"
    response=""
    title=""
    cache_file="$MAL_CACHE_DIR/mal_id_${mal_id}"
    
    # Try to get from cache first
    if response=$(cache_get "$cache_file"); then
        printf "\33[2K\r\033[1;34mFound anime with MAL ID %s in cache...\033[0m\n" "$mal_id" >&2
    else
        printf "\33[2K\r\033[1;34mSearching for anime with MAL ID: %s...\033[0m\n" "$mal_id" >&2
        
        if ! response=$(curl -s -H "X-MAL-CLIENT-ID: $MAL_CLIENT_ID" \
            "https://api.myanimelist.net/v2/anime/$mal_id?fields=id,title"); then
            die "Error fetching anime data from MAL API"
        fi
        
        # Check if response contains error
        if printf "%s" "$response" | grep -q '"error"'; then
            die "Anime with MAL ID $mal_id not found"
        fi
        
        # Cache the response
        cache_set "$cache_file" "$response"
    fi
    
    # Extract title
    title=$(printf "%s" "$response" | sed -n 's/.*"title":"\([^"]*\)".*/\1/p')
    if [ -z "$title" ]; then
        die "Could not find title for MAL ID $mal_id"
    fi
    
    # Search with this title via the existing search_anime function
    anime_list=$(search_anime "$title")
    [ -z "$anime_list" ] && die "No results found for MAL ID title: $title"
    # Return the first result
    printf "%s\n" "$(printf "%s" "$anime_list" | head -n1)"
}

# get current season anime from MAL API
get_mal_season_anime() {
    response=""
    current_year=$(date +%Y)
    current_month=$(date +%m)
    
    # Determine current season
    case $current_month in
        12|01|02) season="winter" ;;
        03|04|05) season="spring" ;;
        06|07|08) season="summer" ;;
        09|10|11) season="fall" ;;
    esac
    
    # Adjust year for winter (December belongs to next year's winter)
    [ "$current_month" = "12" ] && current_year=$((current_year + 1))
    
    cache_file="$MAL_CACHE_DIR/season_${current_year}_${season}"
    
    # Try to get from cache first
    if response=$(cache_get "$cache_file"); then
        printf "\33[2K\r\033[1;34mFound %s %s season anime in cache...\033[0m\n" "$season" "$current_year" >&2
    else
        printf "\33[2K\r\033[1;34mFetching %s %s season anime...\033[0m\n" "$season" "$current_year" >&2
        
        # Try current season first, if it fails, try previous season
        if ! response=$(curl -s -H "X-MAL-CLIENT-ID: $MAL_CLIENT_ID" \
            "https://api.myanimelist.net/v2/anime/season/$current_year/$season?limit=20&fields=id,title"); then
            die "Error fetching season anime from MAL API"
        fi
        
        # Check if response contains error, try previous season
        if printf "%s" "$response" | grep -q '"error"'; then
            # Try previous season
            case $season in
                winter) prev_season="fall"; prev_year=$((current_year - 1)) ;;
                spring) prev_season="winter"; prev_year=$current_year ;;
                summer) prev_season="spring"; prev_year=$current_year ;;
                fall) prev_season="summer"; prev_year=$current_year ;;
            esac
            
            printf "\33[2K\r\033[1;34mCurrent season not available, trying %s %s...\033[0m\n" "$prev_season" "$prev_year" >&2
            
            if ! response=$(curl -s -H "X-MAL-CLIENT-ID: $MAL_CLIENT_ID" \
                "https://api.myanimelist.net/v2/anime/season/$prev_year/$prev_season?limit=20&fields=id,title"); then
                die "Error fetching season anime from MAL API"
            fi
            
            if printf "%s" "$response" | grep -q '"error"'; then
                die "Could not fetch season anime"
            fi
        fi
        
        # Cache the response
        cache_set "$cache_file" "$response"
    fi
    
    # Extract anime data from the correct JSON structure
    anime_data=$(printf "%s" "$response" | sed 's/},{/\n/g' | sed -n 's/.*"id":\([0-9]*\),"title":"\([^"]*\)".*/\1\t\2/p')
    printf "%s" "$anime_data" | while read -r mal_id title; do
        if [ -n "$mal_id" ] && [ -n "$title" ]; then
            anime_result=$(search_anime "$title" | head -n1)
            if [ -n "$anime_result" ]; then
                printf "%s\n" "$anime_result"
            fi
        fi
    done
}

# get top anime from MAL API
get_mal_top_anime() {
    response=""
    cache_file="$MAL_CACHE_DIR/top_anime"
    
    # Try to get from cache first
    if response=$(cache_get "$cache_file"); then
        printf "\33[2K\r\033[1;34mFound top anime in cache...\033[0m\n" >&2
    else
        printf "\33[2K\r\033[1;34mFetching top anime...\033[0m\n" >&2
        
        if ! response=$(curl -s -H "X-MAL-CLIENT-ID: $MAL_CLIENT_ID" \
            "https://api.myanimelist.net/v2/anime/ranking?ranking_type=all&limit=20&fields=id,title,alternative_titles"); then
            die "Error fetching top anime from MAL API"
        fi
        
        # Check if response contains error
        if printf "%s" "$response" | grep -q '"error"'; then
            die "Could not fetch top anime"
        fi
        
        # Cache the response
        cache_set "$cache_file" "$response"
    fi
    
    # Extract anime data and search for each
    anime_data=$(printf "%s" "$response" | sed 's/},{/\n/g' | sed -n 's/.*"id":\([0-9]*\),"title":"\([^"]*\)".*/\1\t\2/p')
    printf "%s" "$anime_data" | while read -r mal_id title; do
        if [ -n "$mal_id" ] && [ -n "$title" ]; then
            anime_result=$(search_anime "$title" | head -n1)
            if [ -n "$anime_result" ]; then
                printf "%s\n" "$anime_result"
            fi
        fi
    done
}

# SCRAPING

# extract the video links from response of embed urls, extract mp4 links form m3u8 lists
get_links() {
    response="$(curl -e "$allanime_refr" -s "https://${allanime_base}$*" -A "$agent")"
    episode_link="$(printf '%s' "$response" | sed 's|},{|\
|g' | sed -nE 's|.*link":"([^"]*)".*"resolutionStr":"([^"]*)".*|\2 >\1|p;s|.*hls","url":"([^"]*)".*"hardsub_lang":"en-US".*|\1|p')"

    case "$episode_link" in
        *repackager.wixmp.com*)
            extract_link=$(printf "%s" "$episode_link" | cut -d'>' -f2 | sed 's|repackager.wixmp.com/||g;s|\.urlset.*||g')
            for j in $(printf "%s" "$episode_link" | sed -nE 's|.*/,([^/]*),/mp4.*|\1|p' | sed 's|,|\
|g'); do
                printf "%s >%s\n" "$j" "$extract_link" | sed "s|,[^/]*|${j}|g"
            done | sort -nr
            ;;
        *master.m3u8*)
            m3u8_refr=$(printf '%s' "$response" | sed -nE 's|.*Referer":"([^"]*)".*|\1|p') && printf '%s\n' "m3u8_refr >$m3u8_refr" >"$cache_dir/m3u8_refr"
            extract_link=$(printf "%s" "$episode_link" | head -1 | cut -d'>' -f2)
            relative_link=$(printf "%s" "$extract_link" | sed 's|[^/]*$||')
            m3u8_streams="$(curl -e "$m3u8_refr" -s "$extract_link" -A "$agent")"
            printf "%s" "$m3u8_streams" | grep -q "EXTM3U" && printf "%s" "$m3u8_streams" | sed 's|^#EXT-X-STREAM.*x||g; s|,.*|p|g; /^#/d; $!N; s|\n| >|;/EXT-X-I-FRAME/d' |
                sed "s|>|cc>${relative_link}|g" | sort -nr
            printf '%s' "$response" | sed -nE 's|.*"subtitles":\[\{"lang":"en","label":"English","default":"default","src":"([^"]*)".*|subtitle >\1|p' >"$cache_dir/suburl"
            ;;
        *) [ -n "$episode_link" ] && printf "%s\n" "$episode_link" ;;
    esac

    printf "%s" "$*" | grep -q "tools.fast4speed.rsvp" && printf "%s\n" "Yt >$*"
    printf "\033[1;32m%s\033[0m Links Fetched\n" "$provider_name" 1>&2
}

# initialises provider_name and provider_id. First argument is the provider name, 2nd is the regex that matches that provider's link
provider_init() {
    provider_name=$1
    provider_id=$(printf "%s" "$resp" | sed -n "$2" | head -1 | cut -d':' -f2 | sed 's/../&\
/g' | sed 's/^79$/A/g;s/^7a$/B/g;s/^7b$/C/g;s/^7c$/D/g;s/^7d$/E/g;s/^7e$/F/g;s/^7f$/G/g;s/^70$/H/g;s/^71$/I/g;s/^72$/J/g;s/^73$/K/g;s/^74$/L/g;s/^75$/M/g;s/^76$/N/g;s/^77$/O/g;s/^68$/P/g;s/^69$/Q/g;s/^6a$/R/g;s/^6b$/S/g;s/^6c$/T/g;s/^6d$/U/g;s/^6e$/V/g;s/^6f$/W/g;s/^60$/X/g;s/^61$/Y/g;s/^62$/Z/g;s/^59$/a/g;s/^5a$/b/g;s/^5b$/c/g;s/^5c$/d/g;s/^5d$/e/g;s/^5e$/f/g;s/^5f$/g/g;s/^50$/h/g;s/^51$/i/g;s/^52$/j/g;s/^53$/k/g;s/^54$/l/g;s/^55$/m/g;s/^56$/n/g;s/^57$/o/g;s/^48$/p/g;s/^49$/q/g;s/^4a$/r/g;s/^4b$/s/g;s/^4c$/t/g;s/^4d$/u/g;s/^4e$/v/g;s/^4f$/w/g;s/^40$/x/g;s/^41$/y/g;s/^42$/z/g;s/^08$/0/g;s/^09$/1/g;s/^0a$/2/g;s/^0b$/3/g;s/^0c$/4/g;s/^0d$/5/g;s/^0e$/6/g;s/^0f$/7/g;s/^00$/8/g;s/^01$/9/g;s/^15$/-/g;s/^16$/./g;s/^67$/_/g;s/^46$/~/g;s/^02$/:/g;s/^17$/\//g;s/^07$/?/g;s/^1b$/#/g;s/^63$/\[/g;s/^65$/\]/g;s/^78$/@/g;s/^19$/!/g;s/^1c$/$/g;s/^1e$/&/g;s/^10$/\(/g;s/^11$/\)/g;s/^12$/*/g;s/^13$/+/g;s/^14$/,/g;s/^03$/;/g;s/^05$/=/g;s/^1d$/%/g' | tr -d '\n' | sed "s/\/clock/\/clock\.json/")
}

# generates links based on given provider
generate_link() {
    case $1 in
        1) provider_init "wixmp" "/Default :/p" ;;    # wixmp(default)(m3u8)(multi) -> (mp4)(multi)
        2) provider_init "youtube" "/Yt-mp4 :/p" ;;   # youtube(mp4)(single)
        3) provider_init "sharepoint" "/S-mp4 :/p" ;; # sharepoint(mp4)(single)
        *) provider_init "hianime" "/Luf-Mp4 :/p" ;;  # hianime(m3u8)(multi)
    esac
    [ -n "$provider_id" ] && get_links "$provider_id"
}

select_quality() {
    # removing urls which have soft subs to avoid playing on android, iSH and vlc (m3u8 streams don't get correct referrer)
    printf '%s' "$player_function" | cut -f1 -d" " | grep -qE '(android|iSH|vlc)' && links=$(printf '%s' "$links" | sed '/cc>/d;/subtitle >/d;/m3u8_refr >/d')
    printf '%s' "$player_function" | cut -f1 -d" " | grep -qE '(android|iSH)' && links=$(printf '%s' "$links" | sed '/Yt >/d')
    case "$1" in
        best) result=$(printf "%s" "$links" | head -n1) ;;
        worst) result=$(printf "%s" "$links" | grep -E '^[0-9]{3,4}' | tail -n1) ;;
        *) result=$(printf "%s" "$links" | grep -m 1 "$1") ;;
    esac
    [ -z "$result" ] && printf "Specified quality not found, defaulting to best\n" 1>&2 && result=$(printf "%s" "$links" | head -n1)

    # add refr,sub flags for m3u8 and refr flag for yt
    printf '%s' "$result" | grep -q "cc>" && subtitle="$(printf '%s' "$links" | sed -nE 's|subtitle >(.*)|\1|p')" &&
        [ -n "$subtitle" ] && subs_flag="--sub-file=$subtitle"
    printf '%s' "$result" | grep -q "cc>" && m3u8_refr="$(printf '%s' "$links" | sed -nE 's|m3u8_refr >(.*)|\1|p')" && refr_flag="--referrer=$m3u8_refr"
    printf "%s" "$result" | grep -q "tools.fast4speed.rsvp" && refr_flag="--referrer=$allanime_refr"

    ! (printf '%s' "$result" | grep -qE "(cc>|tools.fast4speed.rsvp)") && unset refr_flag
    ! (printf '%s' "$result" | grep -q "cc>") && unset subs_flag
    episode=$(printf "%s" "$result" | cut -d'>' -f2)
}

# gets embed urls, collects direct links into provider files, selects one with desired quality into $episode
get_episode_url() {
    # get the embed urls of the selected episode
    #shellcheck disable=SC2016
    episode_embed_gql='query ($showId: String!, $translationType: VaildTranslationTypeEnumType!, $episodeString: String!) { episode( showId: $showId translationType: $translationType episodeString: $episodeString ) { episodeString sourceUrls }}'

    resp=$(curl -e "$allanime_refr" -s -G "${allanime_api}/api" --data-urlencode "variables={\"showId\":\"$id\",\"translationType\":\"$mode\",\"episodeString\":\"$ep_no\"}" --data-urlencode "query=$episode_embed_gql" -A "$agent" | tr '{}' '\n' | sed 's|\\u002F|\/|g;s|\\||g' | sed -nE 's|.*sourceUrl":"--([^"]*)".*sourceName":"([^"]*)".*|\2 :\1|p')
    # generate links into sequential files
    cache_dir="$(mktemp -d)"
    providers="1 2 3 4"
    for provider in $providers; do
        generate_link "$provider" >"$cache_dir"/"$provider" &
    done
    wait
    # select the link with matching quality
    links=$(cat "$cache_dir"/* | sort -g -r -s)
    rm -r "$cache_dir"
    select_quality "$quality"
    if printf "%s" "$ep_list" | grep -q "^$ep_no$"; then
        [ -z "$episode" ] && die "Episode is released, but no valid sources!"
    else
        [ -z "$episode" ] && die "Episode not released!"
    fi
}

# search the query and give results
search_anime() {
    #shellcheck disable=SC2016
    search_gql='query( $search: SearchInput $limit: Int $page: Int $translationType: VaildTranslationTypeEnumType $countryOrigin: VaildCountryOriginEnumType ) { shows( search: $search limit: $limit page: $page translationType: $translationType countryOrigin: $countryOrigin ) { edges { _id name availableEpisodes __typename } }}'

    cache_key=$(cache_key "$1" "$mode")
    cache_file="$SEARCH_CACHE_DIR/${cache_key}"
    
    # Try to get from cache first
    if cached_result=$(cache_get "$cache_file"); then
        printf "%s" "$cached_result"
        return 0
    fi
    
    # Perform the search
    result=$(curl -e "$allanime_refr" -s -G "${allanime_api}/api" --data-urlencode "variables={\"search\":{\"allowAdult\":false,\"allowUnknown\":false,\"query\":\"$1\"},\"limit\":40,\"page\":1,\"translationType\":\"$mode\",\"countryOrigin\":\"ALL\"}" --data-urlencode "query=$search_gql" -A "$agent" | sed 's|Show|\
| g' | sed -nE "s|.*_id\":\"([^\"]*)\",\"name\":\"(.+)\",.*${mode}\":([1-9][^,]*).*|\1	\2 (\3 episodes)|p" | sed 's/\\"//g')
    
    # Cache the result
    cache_set "$cache_file" "$result"
    
    printf "%s" "$result"
}

time_until_next_ep() {
    animeschedule="https://animeschedule.net"
    query="$(printf "%s\n" "$*" | tr ' ' '+')"
    curl -s -G "$animeschedule/api/v3/anime" --data "q=${query}" | sed 's|"id"|\n|g' | sed -nE 's|.*,"route":"([^"]*)","premier.*|\1|p' | while read -r anime; do
        data=$(curl -s "$animeschedule/anime/$anime" | sed '1,/"anime-header-list-buttons-wrapper"/d' | sed -nE 's|.*countdown-time-raw" datetime="([^"]*)">.*|Next Raw Release: \1|p;s|.*countdown-time" datetime="([^"]*)">.*|Next Sub Release: \1|p;s|.*english-title">([^<]*)<.*|English Title: \1|p;s|.*main-title".*>([^<]*)<.*|Japanese Title: \1|p')
        status="Ongoing"
        color="33"
        printf "%s\n" "$data"
        ! (printf "%s\n" "$data" | grep -q "Next Raw Release:") && status="Finished" && color="32"
        printf "Status:  \033[1;%sm%s\033[0m\n---\n" "$color" "$status"
    done
    exit 0
}

# get the episodes list of the selected anime
episodes_list() {
    #shellcheck disable=SC2016
    episodes_list_gql='query ($showId: String!) { show( _id: $showId ) { _id availableEpisodesDetail }}'

    cache_key=$(cache_key "$1" "$mode")
    cache_file="$EPISODE_CACHE_DIR/${cache_key}"
    
    # Try to get from cache first
    if cached_result=$(cache_get "$cache_file"); then
        printf "%s" "$cached_result"
        return 0
    fi
    
    # Fetch episode list
    result=$(curl -e "$allanime_refr" -s -G "${allanime_api}/api" --data-urlencode "variables={\"showId\":\"$*\"}" --data-urlencode "query=$episodes_list_gql" -A "$agent" | sed -nE "s|.*$mode\":\[([0-9.\",]*)\].*|\1|p" | sed 's|,|\
|g; s|"||g' | sort -n -k 1)
    
    # Cache the result
    cache_set "$cache_file" "$result"
    
    printf "%s" "$result"
}

# PLAYING

process_hist_entry() {
    ep_list=$(episodes_list "$id")
    latest_ep=$(printf "%s\n" "$ep_list" | tail -n1)
    title=$(printf "%s\n" "$title" | sed "s|[0-9]\+ episodes|${latest_ep} episodes|")
    ep_no=$(printf "%s" "$ep_list" | sed -n "/^${ep_no}$/{n;p;}") 2>/dev/null
    [ -n "$ep_no" ] && printf "%s\t%s - episode %s\n" "$id" "$title" "$ep_no"
}

update_history() {
    if grep -q -- "$id" "$histfile"; then
        sed -E "s|^[^	]+	${id}	[^	]+$|${ep_no}	${id}	${title}|" "$histfile" >"${histfile}.new"
    else
        cp "$histfile" "${histfile}.new"
        printf "%s\t%s\t%s\n" "$ep_no" "$id" "$title" >>"${histfile}.new"
    fi
    mv "${histfile}.new" "$histfile"
}

download() {
    # download subtitle if it's set
    [ -n "$subtitle" ] && curl -s "$subtitle" -o "$download_dir/$2.vtt"
    case $1 in
        *m3u8*)
            if command -v "yt-dlp" >/dev/null; then
                yt-dlp --referer "$m3u8_refr" "$1" --no-skip-unavailable-fragments --fragment-retries infinite -N 16 -o "$download_dir/$2.mp4"
            else
                ffmpeg -referer "$m3u8_refr" -loglevel error -stats -i "$1" -c copy "$download_dir/$2.mp4"
            fi
            # embed subs into downloads
            # [ -e "$download_dir/$2.vtt" ] && ffmpeg -i "$download_dir/$2.mp4" -i "$download_dir/$2.vtt" -c copy -c:s mov_text "$download_dir/$2.bak.mp4" && mv "$download_dir/$2.bak.mp4" "$download_dir/$2.mp4"
            ;;
        *)
            # shellcheck disable=SC2086
            aria2c --referer="$allanime_refr" --enable-rpc=false --check-certificate=false --continue $iSH_DownFix --summary-interval=0 -x 16 -s 16 "$1" --dir="$download_dir" -o "$2.mp4" --download-result=hide
            ;;
    esac
}

play_episode() {
    [ "$log_episode" = 1 ] && [ "$player_function" != "debug" ] && [ "$player_function" != "download" ] && command -v logger >/dev/null && logger -t ani-cli "${allanime_title}${ep_no}"
    [ "$skip_intro" = 1 ] && skip_flag="$(ani-skip -q "$mal_id" -e "$ep_no")"
    [ -z "$episode" ] && get_episode_url
    # shellcheck disable=SC2086
    case "$player_function" in
        debug)
            printf "All links:\n%s\nSelected link:\n" "$links"
            printf "%s\n" "$episode"
            ;;
        mpv*)
            if [ "$no_detach" = 0 ]; then
                nohup $player_function $skip_flag --force-media-title="${allanime_title}Episode ${ep_no}" "$episode" $subs_flag $refr_flag >/dev/null 2>&1 &
            else
                $player_function $skip_flag $subs_flag $refr_flag --force-media-title="${allanime_title}Episode ${ep_no}" "$episode"
                mpv_exitcode=$?
                [ "$exit_after_play" = 1 ] && [ -z "$range" ] && exit "$mpv_exitcode"
            fi
            ;;
        android_mpv) nohup am start --user 0 -a android.intent.action.VIEW -d "$episode" -n is.xyz.mpv/.MPVActivity >/dev/null 2>&1 & ;;
        android_vlc) nohup am start --user 0 -a android.intent.action.VIEW -d "$episode" -n org.videolan.vlc/org.videolan.vlc.gui.video.VideoPlayerActivity -e "title" "${allanime_title}Episode ${ep_no}" >/dev/null 2>&1 & ;;
        *iina*)
            [ -n "$subs_flag" ] && subs_flag="--mpv-${subs_flag#--}"
            [ -n "$refr_flag" ] && refr_flag="--mpv-${refr_flag#--}"
            nohup $player_function --no-stdin --keep-running --mpv-force-media-title="${allanime_title}Episode ${ep_no}" $subs_flag $refr_flag "$episode" >/dev/null 2>&1 &
            ;;
        flatpak_mpv) flatpak run io.mpv.Mpv --force-media-title="${allanime_title}Episode ${ep_no}" "$episode" $subs_flag $refr_flag >/dev/null 2>&1 & ;;
        vlc*) nohup $player_function --http-referrer="${allanime_refr}" --play-and-exit --meta-title="${allanime_title}Episode ${ep_no}" "$episode" >/dev/null 2>&1 & ;;
        *yncpla*) nohup $player_function "$episode" -- --force-media-title="${allanime_title}Episode ${ep_no}" $subs_flag $refr_flag >/dev/null 2>&1 & ;;
        download) "$player_function" "$episode" "${allanime_title}Episode ${ep_no}" "$subtitle" ;;
        catt) nohup catt cast "$episode" -s "$subtitle" >/dev/null 2>&1 & ;;
        iSH)
            printf "\e]8;;vlc://%s\a~~~~~~~~~~~~~~~~~~~~\n~ Tap to open VLC ~\n~~~~~~~~~~~~~~~~~~~~\e]8;;\a\n" "$episode"
            sleep 5
            ;;
        *) nohup $player_function "$episode" >/dev/null 2>&1 & ;;
    esac
    replay="$episode"
    unset episode
    update_history
    [ "$use_external_menu" = "1" ] && wait
}

play() {
    start=$(printf "%s" "$ep_no" | grep -Eo '^(-1|[0-9]+(\.[0-9]+)?)')
    end=$(printf "%s" "$ep_no" | grep -Eo '(-1|[0-9]+(\.[0-9]+)?)$')
    [ "$start" = "-1" ] && ep_no=$(printf "%s" "$ep_list" | tail -n1) && unset start
    [ -z "$end" ] || [ "$end" = "$start" ] && unset start end
    [ "$end" = "-1" ] && end=$(printf "%s" "$ep_list" | tail -n1)
    line_count=$(printf "%s\n" "$ep_no" | wc -l | tr -d "[:space:]")
    if [ "$line_count" != 1 ] || [ -n "$start" ]; then
        [ -z "$start" ] && start=$(printf "%s\n" "$ep_no" | head -n1)
        [ -z "$end" ] && end=$(printf "%s" "$ep_no" | tail -n1)
        range=$(printf "%s\n" "$ep_list" | sed -nE "/^${start}\$/,/^${end}\$/p")
        [ -z "$range" ] && die "Invalid range!"
        for i in $range; do
            tput clear
            ep_no=$i
            printf "\33[2K\r\033[1;34mPlaying episode %s...\033[0m\n" "$ep_no"
            [ "$i" = "$end" ] && unset range
            play_episode
        done
    else
        play_episode
    fi
    # moves up to stored position and deletes to end
    [ "$player_function" != "debug" ] && [ "$player_function" != "download" ] && tput rc && tput ed
}

# MAIN

# setup
agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0"
allanime_refr="https://allmanga.to"
allanime_base="allanime.day"
allanime_api="https://api.${allanime_base}"
mode="${ANI_CLI_MODE:-sub}"
download_dir="${ANI_CLI_DOWNLOAD_DIR:-.}"
log_episode="${ANI_CLI_LOG:-1}"
quality="${ANI_CLI_QUALITY:-best}"
case "$(uname -a | cut -d " " -f 1,3-)" in
    *Darwin*) player_function="${ANI_CLI_PLAYER:-$(where_iina)}" ;;   # mac OS
    *ndroid*) player_function="${ANI_CLI_PLAYER:-android_mpv}" ;;     # Android OS (termux)
    *MINGW* | *WSL2*) player_function="${ANI_CLI_PLAYER:-mpv.exe}" ;; # Windows OS
    *ish*) player_function="${ANI_CLI_PLAYER:-iSH}" ;;                # iOS (iSH)
    *) player_function="${ANI_CLI_PLAYER:-$(where_mpv)}" ;;           # Linux OS
esac

no_detach="${ANI_CLI_NO_DETACH:-0}"
exit_after_play="${ANI_CLI_EXIT_AFTER_PLAY:-0}"
use_external_menu="${ANI_CLI_EXTERNAL_MENU:-0}"
external_menu_normal_window="${ANI_CLI_EXTERNAL_MENU_NORMAL_WINDOW:-0}"
skip_intro="${ANI_CLI_SKIP_INTRO:-0}"
# shellcheck disable=SC2154
skip_title="$ANI_CLI_SKIP_TITLE"
[ -t 0 ] || use_external_menu=1
hist_dir="${ANI_CLI_HIST_DIR:-${XDG_STATE_HOME:-$HOME/.local/state}/ani-cli}"
[ ! -d "$hist_dir" ] && mkdir -p "$hist_dir"
histfile="$hist_dir/ani-hsts"
[ ! -f "$histfile" ] && : >"$histfile"
favorites_file="$hist_dir/ani-favorites"
[ ! -f "$favorites_file" ] && : >"$favorites_file"
search="${ANI_CLI_DEFAULT_SOURCE:-scrape}"

CONFIG_DIR="$HOME/.config/ani-cli"
CONFIG_FILE="$CONFIG_DIR/mal.conf"

if [ ! -f "$CONFIG_FILE" ]; then
    printf "\n🔑 You need a MyAnimeList API client ID for certain features.\n"
    printf "1. Go to https://myanimelist.net/apiconfig and create a new application.\n"
    printf "2. Copy your client ID.\n"
    printf "3. Enter your client ID below.\n"
    printf "Enter your MAL client ID: "
    read -r MAL_CLIENT_ID
    mkdir -p "$CONFIG_DIR"
    echo "MAL_CLIENT_ID=$MAL_CLIENT_ID" > "$CONFIG_FILE"
    printf "Client ID saved in %s.\n" "$CONFIG_FILE"
fi
# shellcheck disable=SC1090
. "$CONFIG_FILE"

# Cache system
CACHE_DIR="$HOME/.cache/ani-cli"
MAL_CACHE_DIR="$CACHE_DIR/mal"
SEARCH_CACHE_DIR="$CACHE_DIR/search"
EPISODE_CACHE_DIR="$CACHE_DIR/episodes"
CACHE_EXPIRY=3600  # 1 hour in seconds

# Create cache directories
mkdir -p "$MAL_CACHE_DIR" "$SEARCH_CACHE_DIR" "$EPISODE_CACHE_DIR"

# Cache functions
cache_get() {
    local cache_file="$1"
    local current_time=$(date +%s)
    local file_time
    
    if [ -f "$cache_file" ]; then
        file_time=$(stat -c %Y "$cache_file" 2>/dev/null || stat -f %m "$cache_file" 2>/dev/null)
        if [ $((current_time - file_time)) -lt "$CACHE_EXPIRY" ]; then
            cat "$cache_file"
            return 0
        fi
    fi
    return 1
}

cache_set() {
    local cache_file="$1"
    local data="$2"
    printf "%s" "$data" > "$cache_file"
}

cache_key() {
    printf "%s" "$*" | md5sum | cut -d' ' -f1
}

# FAVORITES SYSTEM

# get favorites list
get_favorites() {
    if [ -f "$favorites_file" ]; then
        cat "$favorites_file"
    fi
}

# add anime to favorites
add_to_favorites() {
    local anime_id="$1"
    local anime_title="$2"
    
    # Check if already in favorites
    if [ -f "$favorites_file" ] && grep -q "^${anime_id}	" "$favorites_file"; then
        printf "\033[1;33m%s is already in your favorites!\033[0m\n" "$anime_title" >&2
        return 1
    fi
    
    # Add to favorites
    printf "%s	%s\n" "$anime_id" "$anime_title" >> "$favorites_file"
    printf "\033[1;32m%s added to favorites!\033[0m\n" "$anime_title" >&2
}

# add anime to favorites by name
add_favorite_by_name() {
    local anime_name="$1"
    local search_results
    local selected_anime
    
    printf "\033[1;34mSearching for '%s'...\033[0m\n" "$anime_name" >&2
    
    # Search for the anime
    search_results=$(search_anime "$anime_name")
    if [ -z "$search_results" ]; then
        printf "\033[1;31mNo anime found with name '%s'\033[0m\n" "$anime_name" >&2
        return 1
    fi
    
    # Let user select from results
    selected_anime=$(printf "%s" "$search_results" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select anime to add to favorites: ")
    if [ -z "$selected_anime" ]; then
        printf "\033[1;33mNo anime selected\033[0m\n" >&2
        return 1
    fi
    
    # Extract ID and title
    local anime_id=$(printf "%s" "$selected_anime" | cut -f1)
    local anime_title=$(printf "%s" "$selected_anime" | cut -f2)
    
    # Add to favorites
    add_to_favorites "$anime_id" "$anime_title"
}

# remove anime from favorites
remove_from_favorites() {
    local anime_id="$1"
    local anime_title="$2"
    
    if [ -f "$favorites_file" ]; then
        if grep -q "^${anime_id}	" "$favorites_file"; then
            sed -i "/^${anime_id}	/d" "$favorites_file"
            printf "\033[1;32m%s removed from favorites!\033[0m\n" "$anime_title" >&2
        else
            printf "\033[1;33m%s is not in your favorites!\033[0m\n" "$anime_title" >&2
        fi
    fi
}

# check if anime is in favorites
is_in_favorites() {
    local anime_id="$1"
    [ -f "$favorites_file" ] && grep -q "^${anime_id}	" "$favorites_file"
}

# show favorites menu
show_favorites_menu() {
    local favorites_list
    favorites_list=$(get_favorites)
    
    if [ -z "$favorites_list" ]; then
        printf "\033[1;33mNo favorites yet. Add some anime to get started!\033[0m\n" >&2
        return 1
    fi
    
    printf "%s" "$favorites_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select favorite anime: "
}

while [ $# -gt 0 ]; do
    case "$1" in
        -v | --vlc)
            case "$(uname -a | cut -d " " -f 1,3-)" in
                *ndroid*) player_function="android_vlc" ;;
                MINGW* | *WSL2*) player_function="vlc.exe" ;;
                *ish*) player_function="iSH" ;;
                *) player_function="vlc" ;;
            esac
            ;;
        -s | --syncplay)
            case "$(uname -s)" in
                Darwin*) player_function="/Applications/Syncplay.app/Contents/MacOS/syncplay" ;;
                MINGW* | *Msys)
                    export PATH="$PATH":"/c/Program Files (x86)/Syncplay/"
                    player_function="syncplay.exe"
                    ;;
                *) player_function="syncplay" ;;
            esac
            ;;
        -q | --quality)
            [ $# -lt 2 ] && die "missing argument!"
            quality="$2"
            shift
            ;;
        -S | --select-nth)
            [ $# -lt 2 ] && die "missing argument!"
            index="$2"
            shift
            ;;
        -c | --continue) search=history ;;
        -d | --download)
            [ "$player_function" = "iSH" ] && iSH_DownFix="--async-dns=false"
            player_function=download
            ;;
        -D | --delete)
            : >"$histfile"
            exit 0
            ;;
        -l | --logview)
            case "$(uname -s)" in
                Darwin*) log show --predicate 'process == "logger"' ;;
                Linux*) journalctl -t ani-cli ;;
                *) die "Logger not implemented for your platform" ;;
            esac
            exit 0
            ;;
        -V | --version) version_info ;;
        -h | --help) help_info ;;
        -e | --episode | -r | --range)
            [ $# -lt 2 ] && die "missing argument!"
            ep_no="$2"
            shift
            ;;
        --dub) mode="dub" ;;
        --no-detach) no_detach=1 ;;
        --exit-after-play) exit_after_play=1 && no_detach=1 ;;
        --rofi) use_external_menu=1 ;;
        --skip) skip_intro=1 ;;
        --skip-title)
            [ $# -lt 2 ] && die "missing argument!"
            skip_title="$2"
            shift
            ;;
        -N | --nextep-countdown) search=nextep ;;
        -U | --update) update_script ;;
        --mal-id)
            [ $# -lt 2 ] && die "missing argument!"
            mal_search_id="$2"
            search=mal_id
            shift
            ;;
        --mal-season)
            search=mal_season
            ;;
        --mal-top)
            search=mal_top
            ;;
        --clear-cache)
            printf "Clearing cache...\n"
            rm -rf "$CACHE_DIR"
            mkdir -p "$MAL_CACHE_DIR" "$SEARCH_CACHE_DIR" "$EPISODE_CACHE_DIR"
            printf "Cache cleared successfully.\n"
            exit 0
            ;;
        --favorites)
            search=favorites
            ;;
        --add-favorite)
            [ $# -lt 2 ] && die "missing argument!"
            add_favorite_by_name "$2"
            exit 0
            ;;
        *) query="$(printf "%s" "$query $1" | sed "s|^ ||;s| |+|g")" ;;
    esac
    shift
done
[ "$use_external_menu" = "0" ] && multi_selection_flag="${ANI_CLI_MULTI_SELECTION:-"-m"}"
[ "$use_external_menu" = "1" ] && multi_selection_flag="${ANI_CLI_MULTI_SELECTION:-"-multi-select"}"
[ "$external_menu_normal_window" = "1" ] && external_menu_args="-normal-window"
printf "\33[2K\r\033[1;34mChecking dependencies...\033[0m\n"
dep_ch "curl" "sed" "grep" || true
[ "$skip_intro" = 1 ] && (dep_ch "ani-skip" || true)
dep_ch "fzf" || true
case "$player_function" in
    debug) ;;
    download) dep_ch "ffmpeg" "aria2c" ;;
    android*) printf "\33[2K\rChecking of players on Android is disabled\n" ;;
    *iSH*) printf "\33[2K\rChecking of players on iOS is disabled\n" ;;
    flatpak_mpv) true ;; # handled out of band in where_mpv
    *) dep_ch "$player_function" ;;
esac

# Color codes
CYAN='\033[1;36m'
YELLOW='\033[1;33m'
MAGENTA='\033[1;35m'
RESET='\033[0m'

# show interactive menu if no search type is specified
if [ "$search" = "scrape" ] && [ -z "$query" ] && [ "$use_external_menu" = "0" ]; then
    printf "${MAGENTA}   ／人◕ ‿‿ ◕人＼   ${RESET}\n"
    printf "${CYAN}🎌 ani-cli - Anime Browser${RESET}\n"
    printf "${YELLOW}1.${RESET} 🔍 Normal search\n"
    printf "${YELLOW}2.${RESET} 🆔 Search by MAL ID\n"
    printf "${YELLOW}3.${RESET} 📅 Season overview (MAL)\n"
    printf "${YELLOW}4.${RESET} ⭐ Top anime (MAL)\n"
    printf "${YELLOW}5.${RESET} ❤️  Favorites\n"
    printf "${YELLOW}6.${RESET} ➕ Add to favorites\n"
    printf "${CYAN}\nChoose an option (1-6): ${RESET}"
    read -r menu_choice
    
    case "$menu_choice" in
        1) 
            printf "\n${CYAN}Search anime: ${RESET}"
            read -r query
            search="scrape"
            ;;
        2)
            printf "\n${CYAN}Enter MAL ID: ${RESET}"
            read -r mal_search_id
            search="mal_id"
            ;;
        3)
            search="mal_season"
            ;;
        4)
            search="mal_top"
            ;;
        5)
            search="favorites"
            ;;
        6)
            printf "\n${CYAN}Enter anime name to add to favorites: ${RESET}"
            read -r anime_name
            add_favorite_by_name "$anime_name"
            exit 0
            ;;
        *)
            die "Invalid choice"
            ;;
    esac
fi

# searching
case "$search" in
    mal_id)
        anime_list=$(search_anime_by_mal_id "$mal_search_id")
        [ -z "$anime_list" ] && die "Anime with MAL ID $mal_search_id not found!"
        title=$(printf "%s" "$anime_list" | cut -f2)
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        id=$(printf "%s" "$anime_list" | cut -f1)
        ep_list=$(episodes_list "$id")
        [ -z "$ep_no" ] && ep_no=$(printf "%s" "$ep_list" | nth "Select episode: " "$multi_selection_flag")
        [ -z "$ep_no" ] && exit 1
        ;;
    mal_season)
        anime_list=$(get_mal_season_anime)
        [ -z "$anime_list" ] && die "No season anime found!"
        [ -z "$index" ] && result=$(printf "%s" "$anime_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select anime: ")
        [ -n "$index" ] && result=$(printf "%s" "$anime_list" | sed -n "${index}p")
        [ -z "$result" ] && exit 1
        title=$(printf "%s" "$result" | cut -f2)
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        id=$(printf "%s" "$result" | cut -f1)
        ep_list=$(episodes_list "$id")
        [ -z "$ep_no" ] && ep_no=$(printf "%s" "$ep_list" | nth "Select episode: " "$multi_selection_flag")
        [ -z "$ep_no" ] && exit 1
        ;;
    mal_top)
        anime_list=$(get_mal_top_anime)
        [ -z "$anime_list" ] && die "No top anime found!"
        [ -z "$index" ] && result=$(printf "%s" "$anime_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select anime: ")
        [ -n "$index" ] && result=$(printf "%s" "$anime_list" | sed -n "${index}p")
        [ -z "$result" ] && exit 1
        title=$(printf "%s" "$result" | cut -f2)
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        id=$(printf "%s" "$result" | cut -f1)
        ep_list=$(episodes_list "$id")
        [ -z "$ep_no" ] && ep_no=$(printf "%s" "$ep_list" | nth "Select episode: " "$multi_selection_flag")
        [ -z "$ep_no" ] && exit 1
        ;;
    favorites)
        result=$(show_favorites_menu)
        [ -z "$result" ] && exit 1
        id=$(printf "%s" "$result" | cut -f1)
        title=$(printf "%s" "$result" | cut -f2)
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        ep_list=$(episodes_list "$id")
        [ -z "$ep_no" ] && ep_no=$(printf "%s" "$ep_list" | nth "Select episode: " "$multi_selection_flag")
        [ -z "$ep_no" ] && exit 1
        ;;
    history)
        anime_list=$(while read -r ep_no id title; do process_hist_entry & done <"$histfile")
        wait
        [ -z "$anime_list" ] && die "No unwatched series in history!"
        [ -z "${index##*[!0-9]*}" ] && id=$(printf "%s" "$anime_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select anime: " | cut -f1)
        [ -z "${index##*[!0-9]*}" ] || id=$(printf "%s" "$anime_list" | sed -n "${index}p" | cut -f1)
        [ -z "$id" ] && exit 1
        title=$(printf "%s" "$anime_list" | grep "$id" | cut -f2 | sed 's/ - episode.*//')
        ep_list=$(episodes_list "$id")
        ep_no=$(printf "%s" "$anime_list" | grep "$id" | cut -f2 | sed -nE 's/.*- episode (.+)$/\1/p')
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        ;;
    *)
        if [ "$use_external_menu" = "0" ]; then
            while [ -z "$query" ]; do
                printf "\33[2K\r\033[1;36mSearch anime: \033[0m" && read -r query
            done
        else
            [ -z "$query" ] && query=$(printf "" | external_menu "" "Search anime: " "$external_menu_args")
            [ -z "$query" ] && exit 1
        fi
        # for checking new releases by specifying anime name
        [ "$search" = "nextep" ] && time_until_next_ep "$query"

        query=$(printf "%s" "$query" | sed "s| |+|g")
        anime_list=$(search_anime "$query")
        [ -z "$anime_list" ] && die "No results found!"
        [ "$index" -eq "$index" ] 2>/dev/null && result=$(printf "%s" "$anime_list" | sed -n "${index}p")
        [ -z "$index" ] && result=$(printf "%s" "$anime_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select anime: ")
        [ -z "$result" ] && exit 1
        title=$(printf "%s" "$result" | cut -f2)
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        id=$(printf "%s" "$result" | cut -f1)
        ep_list=$(episodes_list "$id")
        [ -z "$ep_no" ] && ep_no=$(printf "%s" "$ep_list" | nth "Select episode: " "$multi_selection_flag")
        [ -z "$ep_no" ] && exit 1
        ;;
esac
[ "$skip_intro" = 1 ] && mal_id="$(ani-skip -q "${skip_title:-${title}}")"

# moves the cursor up one line and clears that line
tput cuu1 && tput el
# stores the position of cursor
tput sc

# playback & loop
play
[ "$player_function" = "download" ] || [ "$player_function" = "debug" ] && exit 0

while cmd=$(printf "next\nreplay\nprevious\nselect\nchange_quality\nadd_favorite\nremove_favorite\nquit" | nth "Playing episode $ep_no of $title... "); do
    case "$cmd" in
        next) ep_no=$(printf "%s" "$ep_list" | sed -n "/^${ep_no}$/{n;p;}") 2>/dev/null ;;
        replay) episode="$replay" ;;
        previous) ep_no=$(printf "%s" "$ep_list" | sed -n "/^${ep_no}$/{g;1!p;};h") 2>/dev/null ;;
        select) ep_no=$(printf "%s" "$ep_list" | nth "Select episode: " "$multi_selection_flag") ;;
        change_quality)
            new_quality="$(printf "%s" "$links" | launcher | cut -d\> -f1)"
            select_quality "$new_quality"
            ;;
        add_favorite)
            if is_in_favorites "$id"; then
                printf "\033[1;33m%s is already in your favorites!\033[0m\n" "$title" >&2
            else
                add_to_favorites "$id" "$title"
            fi
            continue
            ;;
        remove_favorite)
            if is_in_favorites "$id"; then
                remove_from_favorites "$id" "$title"
            else
                printf "\033[1;33m%s is not in your favorites!\033[0m\n" "$title" >&2
            fi
            continue
            ;;
        *) exit 0 ;;
    esac
    [ -z "$ep_no" ] && die "Out of range"
    play
done

# ani-cli
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Project repository: https://github.com/pystardust/ani-cli
